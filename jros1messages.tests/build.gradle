plugins {
  id 'com.diffplug.spotless'
  id 'jacoco'
}

eclipse.classpath.file {
  // instruct eclipse plugin to put everything to module path
  whenMerged {
    entries.findAll { it.kind == 'lib' }.each { it.entryAttributes['module'] = 'true' }
  }
}

dependencies {
  testImplementation project(":${zzName}")
  zzTestDependencies.split(',').findAll{ !it.isBlank() }.each { testImplementation it }

  def junitVersion = "5.8.1"
  testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
  testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
  testRuntimeOnly "org.junit.platform:junit-platform-commons:1.7.0"
}

jacoco {
  // Java 17 support
  toolVersion = "0.8.10"
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport, jacocoTestCoverageVerification

  testLogging {
    events "started", "failed"
  }
}

jacocoTestReport {
  // generate only HTML report
  reports {
    xml.required = false
    csv.required = false
    html.required = true
  }
  sourceDirectories.from = project(":${zzName}").sourceSets.main.java.srcDirs
  classDirectories.from = project(":${zzName}").sourceSets.main.java.classesDirectory
}

jacocoTestCoverageVerification {
  sourceDirectories.from = project(":${zzName}").sourceSets.main.java.srcDirs
  classDirectories.from = project(":${zzName}").sourceSets.main.java.classesDirectory
  violationRules {
    rule {
    enabled = true
      element = 'BUNDLE'
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = Double.parseDouble(zzMinTestCoverage)
      }
    }
  }
}

// run spotless and format code before the build
testClasses.dependsOn spotlessApply
